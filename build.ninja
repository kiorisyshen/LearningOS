# build.ninja
CODE_ROOT = .
BUILD_ROOT = build

cc     = cross_compiler/i386elfgcc/bin/i386-elf-g++
cflags = -ffreestanding

linker = cross_compiler/i386elfgcc/bin/i386-elf-ld
linkAsmEntry_flags = -Ttext 0x1000 --oformat binary

# asm compile
rule compileASMbin
  command = nasm -i boot -f bin $in -o $out

rule compileASMelf
  command = nasm -f elf $in -o $out

# cpp compile
rule compileCPP
  command = $cc $cflags -c $in -o $out

# cpp & asm link
rule linkAsmEntry
  command = $linker $linkAsmEntry_flags $in -o $out

# concatenate bootsect & kernel
rule catkernel
  command = cat $in > $out


build $BUILD_ROOT/bootsect.bin: compileASMbin $CODE_ROOT/boot/bootsect.asm
build $BUILD_ROOT/kernel_entry.o: compileASMelf $CODE_ROOT/boot/kernel_entry.asm

build $BUILD_ROOT/kernel.o: compileCPP $CODE_ROOT/kernel/kernel.cpp
build $BUILD_ROOT/kernel.bin: linkAsmEntry $BUILD_ROOT/kernel_entry.o $BUILD_ROOT/kernel.o

build $BUILD_ROOT/os-image.bin: catkernel $BUILD_ROOT/bootsect.bin $BUILD_ROOT/kernel.bin

default $BUILD_ROOT/os-image.bin
